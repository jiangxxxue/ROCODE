{"task_id": "HumanEval/0", "test_input": "has_close_elements([1.0, 2.0, 3.0], 0.5)\nhas_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)", "public_test_cases": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n"}
{"task_id": "HumanEval/1", "test_input": "separate_paren_groups('( ) (( )) (( )( ))')", "public_test_cases": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"task_id": "HumanEval/2", "test_input": "truncate_number(3.5)", "public_test_cases": "assert truncate_number(3.5) == 0.5\n"}
{"task_id": "HumanEval/3", "test_input": "below_zero([1, 2, 3])\nbelow_zero([1, 2, -4, 5])", "public_test_cases": "assert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True\n"}
{"task_id": "HumanEval/4", "test_input": "mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])", "public_test_cases": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n"}
{"task_id": "HumanEval/5", "test_input": "intersperse([], 4)\nintersperse([1, 2, 3], 4)", "public_test_cases": "assert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n"}
{"task_id": "HumanEval/6", "test_input": "parse_nested_parens('(()()) ((())) () ((())()())')", "public_test_cases": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n"}
{"task_id": "HumanEval/7", "test_input": "filter_by_substring([], 'a')\nfilter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')", "public_test_cases": "assert filter_by_substring([], 'a') == []\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']\n"}
{"task_id": "HumanEval/8", "test_input": "sum_product([])\nsum_product([1, 2, 3, 4])", "public_test_cases": "assert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n"}
{"task_id": "HumanEval/9", "test_input": "rolling_max([1, 2, 3, 2, 3, 4, 2])", "public_test_cases": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\n"}
{"task_id": "HumanEval/10", "test_input": "make_palindrome('')\nmake_palindrome('cat')\nmake_palindrome('cata')", "public_test_cases": "assert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'\n"}
{"task_id": "HumanEval/11", "test_input": "string_xor('010', '110')", "public_test_cases": "assert string_xor('010', '110') == '100'\n"}
{"task_id": "HumanEval/12", "test_input": "longest([])\nlongest(['a', 'b', 'c'])\nlongest(['a', 'bb', 'ccc'])", "public_test_cases": "assert longest([]) == None  # Assuming the function returns None for an empty list\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n"}
{"task_id": "HumanEval/13", "test_input": "greatest_common_divisor(3, 5)\ngreatest_common_divisor(25, 15)", "public_test_cases": "assert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(25, 15) == 5\n"}
{"task_id": "HumanEval/14", "test_input": "all_prefixes('abc')", "public_test_cases": "assert all_prefixes('abc') == ['a', 'ab', 'abc']\n"}
{"task_id": "HumanEval/15", "test_input": "string_sequence(0)\nstring_sequence(5)", "public_test_cases": "assert string_sequence(0) == '0'\nassert string_sequence(5) == '0 1 2 3 4 5'\n"}
{"task_id": "HumanEval/16", "test_input": "count_distinct_characters('xyzXYZ')\ncount_distinct_characters('Jerry')", "public_test_cases": "assert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4\n"}
{"task_id": "HumanEval/17", "test_input": "parse_music('o o| .| o| o| .| .| .| .| o o')", "public_test_cases": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"}
{"task_id": "HumanEval/18", "test_input": "how_many_times('', 'a')\nhow_many_times('aaa', 'a')\nhow_many_times('aaaa', 'aa')", "public_test_cases": "assert how_many_times('', 'a') == 0\nassert how_many_times('aaa', 'a') == 3\nassert how_many_times('aaaa', 'aa') == 3\n"}
{"task_id": "HumanEval/19", "test_input": "sort_numbers('three one five')", "public_test_cases": "assert sort_numbers('three one five') == 'one three five'\n"}
{"task_id": "HumanEval/20", "test_input": "find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\nfind_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])", "public_test_cases": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n"}
{"task_id": "HumanEval/21", "test_input": "rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])", "public_test_cases": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n"}
{"task_id": "HumanEval/22", "test_input": "filter_integers(['a', 3.14, 5])\nfilter_integers([1, 2, 3, 'abc', {}, []])", "public_test_cases": "assert filter_integers(['a', 3.14, 5]) == [5]\nassert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]\n"}
{"task_id": "HumanEval/23", "test_input": "strlen('')\nstrlen('abc')", "public_test_cases": "assert strlen('') == 0\nassert strlen('abc') == 3\n"}
{"task_id": "HumanEval/24", "test_input": "largest_divisor(15)", "public_test_cases": "assert largest_divisor(15) == 5\n"}
{"task_id": "HumanEval/25", "test_input": "factorize(8)\nfactorize(25)\nfactorize(70)", "public_test_cases": "assert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]\n"}
{"task_id": "HumanEval/26", "test_input": "remove_duplicates([1, 2, 3, 2, 4])", "public_test_cases": "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n"}
{"task_id": "HumanEval/27", "test_input": "flip_case('Hello')", "public_test_cases": "assert flip_case('Hello') == 'hELLO'\n"}
{"task_id": "HumanEval/28", "test_input": "concatenate([])\nconcatenate(['a', 'b', 'c'])", "public_test_cases": "assert concatenate([]) == ''\nassert concatenate(['a', 'b', 'c']) == 'abc'\n"}
{"task_id": "HumanEval/29", "test_input": "filter_by_prefix([], 'a')\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')", "public_test_cases": "assert filter_by_prefix([], 'a') == []\nassert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']\n"}
{"task_id": "HumanEval/30", "test_input": "get_positive([-1, 2, -4, 5, 6])\nget_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "public_test_cases": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]\nassert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]\n"}
{"task_id": "HumanEval/31", "test_input": "is_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)", "public_test_cases": "assert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False\n"}
{"task_id": "HumanEval/32", "test_input": "round(find_zero([1, 2]), 2)\nround(find_zero([-6, 11, -6, 1]), 2)", "public_test_cases": "assert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0\n"}
{"task_id": "HumanEval/33", "test_input": "sort_third([1, 2, 3])\nsort_third([5, 6, 3, 4, 8, 9, 2])", "public_test_cases": "assert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]\n"}
{"task_id": "HumanEval/34", "test_input": "unique([5, 3, 5, 2, 3, 3, 9, 0, 123])", "public_test_cases": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n"}
{"task_id": "HumanEval/35", "test_input": "max_element([1, 2, 3])\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "public_test_cases": "assert max_element([1, 2, 3]) == 3\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123\n"}
{"task_id": "HumanEval/36", "test_input": "fizz_buzz(50)\nfizz_buzz(78)\nfizz_buzz(79)", "public_test_cases": "assert fizz_buzz(50) == 0\nassert fizz_buzz(78) == 2\nassert fizz_buzz(79) == 3\n"}
{"task_id": "HumanEval/37", "test_input": "sort_even([1, 2, 3])\nsort_even([5, 6, 3, 4])", "public_test_cases": "assert sort_even([1, 2, 3]) == [1, 2, 3]\nassert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]\n"}
{"task_id": "HumanEval/38", "test_input": "", "public_test_cases": "pass\n"}
{"task_id": "HumanEval/39", "test_input": "prime_fib(1)\nprime_fib(2)\nprime_fib(3)\nprime_fib(4)\nprime_fib(5)", "public_test_cases": "assert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89\n"}
{"task_id": "HumanEval/40", "test_input": "triples_sum_to_zero([1, 3, 5, 0])\ntriples_sum_to_zero([1, 3, -2, 1])\ntriples_sum_to_zero([1, 2, 3, 7])\ntriples_sum_to_zero([2, 4, -5, 3, 9, 7])\ntriples_sum_to_zero([1])", "public_test_cases": "assert triples_sum_to_zero([1, 3, 5, 0]) == False\nassert triples_sum_to_zero([1, 3, -2, 1]) == True\nassert triples_sum_to_zero([1, 2, 3, 7]) == False\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\nassert triples_sum_to_zero([1]) == False\n"}
{"task_id": "HumanEval/41", "test_input": "", "public_test_cases": "pass\n"}
{"task_id": "HumanEval/42", "test_input": "incr_list([1, 2, 3])\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])", "public_test_cases": "assert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]\n"}
{"task_id": "HumanEval/43", "test_input": "pairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])", "public_test_cases": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False\nassert pairs_sum_to_zero([1, 3, -2, 1]) == False\nassert pairs_sum_to_zero([1, 2, 3, 7]) == False\nassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\nassert pairs_sum_to_zero([1]) == False\n"}
{"task_id": "HumanEval/44", "test_input": "change_base(8, 3)\nchange_base(8, 2)\nchange_base(7, 2)", "public_test_cases": "assert change_base(8, 3) == '22'\nassert change_base(8, 2) == '1000'\nassert change_base(7, 2) == '111'\n"}
{"task_id": "HumanEval/45", "test_input": "triangle_area(5, 3)", "public_test_cases": "assert triangle_area(5, 3) == 7.5\n"}
{"task_id": "HumanEval/46", "test_input": "fib4(5)\nfib4(6)\nfib4(7)", "public_test_cases": "assert fib4(5) == 4\nassert fib4(6) == 8\nassert fib4(7) == 14\n"}
{"task_id": "HumanEval/47", "test_input": "median([3, 1, 2, 4, 5])\nmedian([-10, 4, 6, 1000, 10, 20])", "public_test_cases": "assert median([3, 1, 2, 4, 5]) == 3\nassert median([-10, 4, 6, 1000, 10, 20]) == 8.0\n"}
{"task_id": "HumanEval/48", "test_input": "is_palindrome('')\nis_palindrome('aba')\nis_palindrome('aaaaa')\nis_palindrome('zbcd')", "public_test_cases": "assert is_palindrome('') == True\nassert is_palindrome('aba') == True\nassert is_palindrome('aaaaa') == True\nassert is_palindrome('zbcd') == False\n"}
{"task_id": "HumanEval/49", "test_input": "modp(3, 5)\nmodp(1101, 101)\nmodp(0, 101)\nmodp(3, 11)\nmodp(100, 101)", "public_test_cases": "assert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1\n"}
{"task_id": "HumanEval/50", "test_input": "", "public_test_cases": "pass\n"}
{"task_id": "HumanEval/51", "test_input": "remove_vowels('')\nremove_vowels(\"abcdef\\nghijklm\")\nremove_vowels('abcdef')\nremove_vowels('aaaaa')\nremove_vowels('aaBAA')\nremove_vowels('zbcd')", "public_test_cases": "assert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'\n"}
{"task_id": "HumanEval/52", "test_input": "below_threshold([1, 2, 4, 10], 100)\nbelow_threshold([1, 20, 4, 10], 5)", "public_test_cases": "assert below_threshold([1, 2, 4, 10], 100) == True\nassert below_threshold([1, 20, 4, 10], 5) == False\n"}
{"task_id": "HumanEval/53", "test_input": "add(2, 3)\nadd(5, 7)", "public_test_cases": "assert add(2, 3) == 5\nassert add(5, 7) == 12\n"}
{"task_id": "HumanEval/54", "test_input": "same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nsame_chars('abcd', 'dddddddabc')\nsame_chars('dddddddabc', 'abcd')\nsame_chars('eabcd', 'dddddddabc')\nsame_chars('abcd', 'dddddddabce')\nsame_chars('eabcdzzzz', 'dddzzzzzzzddddabc')", "public_test_cases": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert same_chars('abcd', 'dddddddabc') == True\nassert same_chars('dddddddabc', 'abcd') == True\nassert same_chars('eabcd', 'dddddddabc') == False\nassert same_chars('abcd', 'dddddddabce') == False\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n"}
{"task_id": "HumanEval/55", "test_input": "fib(10)\nfib(1)\nfib(8)", "public_test_cases": "assert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21\n"}
{"task_id": "HumanEval/56", "test_input": "correct_bracketing(\"<\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"><<>\")", "public_test_cases": "assert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False\n"}
{"task_id": "HumanEval/57", "test_input": "monotonic([1, 2, 4, 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0, -10])", "public_test_cases": "assert monotonic([1, 2, 4, 20]) == True\nassert monotonic([1, 20, 4, 10]) == False\nassert monotonic([4, 1, 0, -10]) == True\n"}
{"task_id": "HumanEval/58", "test_input": "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\ncommon([5, 3, 2, 8], [3, 2])", "public_test_cases": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n"}
{"task_id": "HumanEval/59", "test_input": "largest_prime_factor(13195)\nlargest_prime_factor(2048)", "public_test_cases": "assert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\n"}
{"task_id": "HumanEval/60", "test_input": "sum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)", "public_test_cases": "assert sum_to_n(30) == 465\nassert sum_to_n(100) == 5050\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\nassert sum_to_n(1) == 1\n"}
{"task_id": "HumanEval/61", "test_input": "correct_bracketing(\"(\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\")(()\")", "public_test_cases": "assert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False\n"}
{"task_id": "HumanEval/62", "test_input": "derivative([3, 1, 2, 4, 5])\nderivative([1, 2, 3])", "public_test_cases": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]\n"}
{"task_id": "HumanEval/63", "test_input": "fibfib(1)\nfibfib(5)\nfibfib(8)", "public_test_cases": "assert fibfib(1) == 0\nassert fibfib(5) == 4\nassert fibfib(8) == 24\n"}
{"task_id": "HumanEval/64", "test_input": "vowels_count(\"abcde\")\nvowels_count(\"ACEDY\")", "public_test_cases": "assert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\n"}
{"task_id": "HumanEval/65", "test_input": "circular_shift(12, 1)\ncircular_shift(12, 2)", "public_test_cases": "assert circular_shift(12, 1) == \"21\"\nassert circular_shift(12, 2) == \"12\"\n"}
{"task_id": "HumanEval/66", "test_input": "digitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")", "public_test_cases": "assert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153\n"}
{"task_id": "HumanEval/67", "test_input": "fruit_distribution(\"5 apples and 6 oranges\", 19)\nfruit_distribution(\"0 apples and 1 oranges\", 3)\nfruit_distribution(\"2 apples and 3 oranges\", 100)\nfruit_distribution(\"100 apples and 1 oranges\", 120)", "public_test_cases": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19\n"}
{"task_id": "HumanEval/68", "test_input": "pluck([4, 2, 3])\npluck([1, 2, 3])\npluck([])\npluck([5, 0, 3, 0, 4, 2])", "public_test_cases": "assert pluck([4, 2, 3]) == [2, 1]\nassert pluck([1, 2, 3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n"}
{"task_id": "HumanEval/69", "test_input": "search([4, 1, 2, 2, 3, 1])\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])\nsearch([5, 5, 4, 4, 4])", "public_test_cases": "assert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1\n"}
{"task_id": "HumanEval/70", "test_input": "strange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])\nstrange_sort_list([])", "public_test_cases": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert strange_sort_list([]) == []\n"}
{"task_id": "HumanEval/71", "test_input": "triangle_area(3, 4, 5)\ntriangle_area(1, 2, 10)", "public_test_cases": "assert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1\n"}
{"task_id": "HumanEval/72", "test_input": "will_it_fly([1, 2], 5)\nwill_it_fly([3, 2, 3], 1)\nwill_it_fly([3, 2, 3], 9)\nwill_it_fly([3], 5)", "public_test_cases": "assert will_it_fly([1, 2], 5) == False  # 1+2 is less than the maximum possible weight, but it's unbalanced.\nassert will_it_fly([3, 2, 3], 1) == False  # it's balanced, but 3+2+3 is more than the maximum possible weight.\nassert will_it_fly([3, 2, 3], 9) == True  # 3+2+3 is less than the maximum possible weight, and it's balanced.\nassert will_it_fly([3], 5) == True  # 3 is less than the maximum possible weight, and it's balanced.\n"}
{"task_id": "HumanEval/73", "test_input": "smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\nsmallest_change([1, 2, 3, 2, 1])", "public_test_cases": "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0\n"}
{"task_id": "HumanEval/74", "test_input": "total_match([], [])\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\ntotal_match(['4'], ['1', '2', '3', '4', '5'])", "public_test_cases": "assert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n"}
{"task_id": "HumanEval/75", "test_input": "is_multiply_prime(30)", "public_test_cases": "assert is_multiply_prime(30) == True\n"}
{"task_id": "HumanEval/76", "test_input": "is_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)", "public_test_cases": "assert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False\n"}
{"task_id": "HumanEval/77", "test_input": "iscube(1)\niscube(2)\niscube(-1)\niscube(64)\niscube(0)\niscube(180)", "public_test_cases": "assert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False\n"}
{"task_id": "HumanEval/78", "test_input": "hex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")", "public_test_cases": "assert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2\n"}
{"task_id": "HumanEval/79", "test_input": "decimal_to_binary(15)\ndecimal_to_binary(32)", "public_test_cases": "assert decimal_to_binary(15) == \"db1111db\"\nassert decimal_to_binary(32) == \"db100000db\"\n"}
{"task_id": "HumanEval/80", "test_input": "is_happy('a')\nis_happy('aa')\nis_happy('abcd')\nis_happy('aabb')\nis_happy('adb')\nis_happy('xyy')", "public_test_cases": "assert is_happy('a') == False\nassert is_happy('aa') == False\nassert is_happy('abcd') == True\nassert is_happy('aabb') == False\nassert is_happy('adb') == True\nassert is_happy('xyy') == False\n"}
{"task_id": "HumanEval/81", "test_input": "numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])", "public_test_cases": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n"}
{"task_id": "HumanEval/82", "test_input": "prime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')", "public_test_cases": "assert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False\n"}
{"task_id": "HumanEval/83", "test_input": "", "public_test_cases": "pass\n"}
{"task_id": "HumanEval/84", "test_input": "solve(1000)\nsolve(150)\nsolve(147)", "public_test_cases": "assert solve(1000) == \"1\"\nassert solve(150) == \"110\"\nassert solve(147) == \"1100\"\n"}
{"task_id": "HumanEval/85", "test_input": "add([4, 2, 6, 7])", "public_test_cases": "assert add([4, 2, 6, 7]) == 2\n"}
{"task_id": "HumanEval/86", "test_input": "anti_shuffle('Hi')\nanti_shuffle('hello')\nanti_shuffle('Hello World!!!')", "public_test_cases": "assert anti_shuffle('Hi') == 'Hi'\nassert anti_shuffle('hello') == 'ehllo'\nassert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n"}
{"task_id": "HumanEval/87", "test_input": "get_row([\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 1, 6],\n        [1, 2, 3, 4, 5, 1]\n    ], 1)\nget_row([], 1)\nget_row([[], [1], [1, 2, 3]], 3)", "public_test_cases": "assert get_row([\n[1, 2, 3, 4, 5, 6],\n[1, 2, 3, 4, 1, 6],\n[1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([], 1) == []\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n"}
{"task_id": "HumanEval/88", "test_input": "sort_array([])\nsort_array([5])\nsort_array([2, 4, 3, 0, 1, 5])\nsort_array([2, 4, 3, 0, 1, 5, 6])", "public_test_cases": "assert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n"}
{"task_id": "HumanEval/89", "test_input": "encrypt('hi')\nencrypt('asdfghjkl')\nencrypt('gf')\nencrypt('et')", "public_test_cases": "assert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'\n"}
{"task_id": "HumanEval/90", "test_input": "next_smallest([1, 2, 3, 4, 5])\nnext_smallest([5, 1, 4, 3, 2])\nnext_smallest([])\nnext_smallest([1, 1])", "public_test_cases": "assert next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2\nassert next_smallest([]) == None\nassert next_smallest([1, 1]) == None\n"}
{"task_id": "HumanEval/91", "test_input": "is_bored(\"Hello world\")\nis_bored(\"The sky is blue. The sun is shining. I love this weather\")", "public_test_cases": "assert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n"}
{"task_id": "HumanEval/92", "test_input": "any_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)", "public_test_cases": "assert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n"}
{"task_id": "HumanEval/93", "test_input": "encode('test')\nencode('This is a message')", "public_test_cases": "assert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'\n"}
{"task_id": "HumanEval/94", "test_input": "skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\nskjkasdkd([0, 81, 12, 3, 1, 21])\nskjkasdkd([0, 8, 1, 2, 1, 7])", "public_test_cases": "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\nassert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\nassert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\nassert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\nassert skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\nassert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n"}
{"task_id": "HumanEval/95", "test_input": "check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\ncheck_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\ncheck_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\ncheck_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\ncheck_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})", "public_test_cases": "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True\nassert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False\nassert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False\nassert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False\nassert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True\n"}
{"task_id": "HumanEval/96", "test_input": "count_up_to(5)\ncount_up_to(11)\ncount_up_to(0)\ncount_up_to(20)\ncount_up_to(1)\ncount_up_to(18)", "public_test_cases": "assert count_up_to(5) == [2, 3]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]\n"}
{"task_id": "HumanEval/97", "test_input": "multiply(148, 412)\nmultiply(19, 28)\nmultiply(2020, 1851)\nmultiply(14, -15)", "public_test_cases": "assert multiply(148, 412) == 16\nassert multiply(19, 28) == 72\nassert multiply(2020, 1851) == 0\nassert multiply(14, -15) == 20\n"}
{"task_id": "HumanEval/98", "test_input": "count_upper('aBCdEf')\ncount_upper('abcdefg')\ncount_upper('dBBE')", "public_test_cases": "assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n"}
{"task_id": "HumanEval/99", "test_input": "closest_integer(\"10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")", "public_test_cases": "assert closest_integer(\"10\") == 10\nassert closest_integer(\"15.3\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\n"}
{"task_id": "HumanEval/100", "test_input": "make_a_pile(3)", "public_test_cases": "assert make_a_pile(3) == [3, 5, 7]\n"}
{"task_id": "HumanEval/101", "test_input": "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "public_test_cases": "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n"}
{"task_id": "HumanEval/102", "test_input": "choose_num(12, 15)\nchoose_num(13, 12)", "public_test_cases": "assert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\n"}
{"task_id": "HumanEval/103", "test_input": "rounded_avg(1, 5)\nrounded_avg(7, 5)\nrounded_avg(10, 20)\nrounded_avg(20, 33)", "public_test_cases": "assert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"\n"}
{"task_id": "HumanEval/104", "test_input": "unique_digits([15, 33, 1422, 1])\nunique_digits([152, 323, 1422, 10])", "public_test_cases": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\n"}
{"task_id": "HumanEval/105", "test_input": "by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([])\nby_length([1, -1, 55])", "public_test_cases": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nassert by_length([]) == []\nassert by_length([1, -1, 55]) == ['One']\n"}
{"task_id": "HumanEval/106", "test_input": "f(5)", "public_test_cases": "assert f(5) == [1, 2, 6, 24, 15]\n"}
{"task_id": "HumanEval/107", "test_input": "even_odd_palindrome(3)\neven_odd_palindrome(12)", "public_test_cases": "assert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)\n"}
{"task_id": "HumanEval/108", "test_input": "count_nums([])\ncount_nums([-1, 11, -11])\ncount_nums([1, 1, 2])", "public_test_cases": "assert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3\n"}
{"task_id": "HumanEval/109", "test_input": "move_one_ball([3, 4, 5, 1, 2])\nmove_one_ball([3, 5, 4, 1, 2])", "public_test_cases": "assert move_one_ball([3, 4, 5, 1, 2]) == True\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n"}
{"task_id": "HumanEval/110", "test_input": "exchange([1, 2, 3, 4], [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 5, 3, 4])", "public_test_cases": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n"}
{"task_id": "HumanEval/111", "test_input": "histogram('a b c')\nhistogram('a b b a')\nhistogram('a b c a b')\nhistogram('b b b b a')\nhistogram('')", "public_test_cases": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nassert histogram('a b b a') == {'a': 2, 'b': 2}\nassert histogram('a b c a b') == {'a': 2, 'b': 2}\nassert histogram('b b b b a') == {'b': 4}\nassert histogram('') == {}\n"}
{"task_id": "HumanEval/112", "test_input": "reverse_delete(\"abcde\", \"ae\")\nreverse_delete(\"abcdef\", \"b\")\nreverse_delete(\"abcdedcba\", \"ab\")", "public_test_cases": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)\nassert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)\nassert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)\n"}
{"task_id": "HumanEval/113", "test_input": "odd_count(['1234567'])\nodd_count(['3', \"11111111\"])", "public_test_cases": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nassert odd_count(['3', \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n"}
{"task_id": "HumanEval/114", "test_input": "minSubArraySum([2, 3, 4, 1, 2, 4])\nminSubArraySum([-1, -2, -3])", "public_test_cases": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6\n"}
{"task_id": "HumanEval/115", "test_input": "max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\nmax_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\nmax_fill([[0,0,0], [0,0,0]], 5)", "public_test_cases": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0\n"}
{"task_id": "HumanEval/116", "test_input": "sort_array([1, 5, 2, 3, 4])\nsort_array([-2, -3, -4, -5, -6])\nsort_array([1, 0, 2, 3, 4])", "public_test_cases": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nassert sort_array([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\nassert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n"}
{"task_id": "HumanEval/117", "test_input": "select_words(\"Mary had a little lamb\", 4)\nselect_words(\"Mary had a little lamb\", 3)\nselect_words(\"simple white space\", 2)\nselect_words(\"Hello world\", 4)\nselect_words(\"Uncle sam\", 3)", "public_test_cases": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n"}
{"task_id": "HumanEval/118", "test_input": "get_closest_vowel(\"yogurt\")\nget_closest_vowel(\"FULL\")\nget_closest_vowel(\"quick\")\nget_closest_vowel(\"ab\")", "public_test_cases": "assert get_closest_vowel(\"yogurt\") == \"u\"\nassert get_closest_vowel(\"FULL\") == \"U\"\nassert get_closest_vowel(\"quick\") == \"\"\nassert get_closest_vowel(\"ab\") == \"\"\n"}
{"task_id": "HumanEval/119", "test_input": "match_parens(['()(', ')'])\nmatch_parens([')', ')'])", "public_test_cases": "assert match_parens(['()(', ')']) == 'Yes'\nassert match_parens([')', ')']) == 'No'\n"}
{"task_id": "HumanEval/120", "test_input": "maximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)", "public_test_cases": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\nassert maximum([4, -4, 4], 2) == [4, 4]\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n"}
{"task_id": "HumanEval/121", "test_input": "solution([5, 8, 7, 1])\nsolution([3, 3, 3, 3, 3])\nsolution([30, 13, 24, 321])", "public_test_cases": "assert solution([5, 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\nassert solution([30, 13, 24, 321]) == 0\n"}
{"task_id": "HumanEval/122", "test_input": "add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)", "public_test_cases": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n"}
{"task_id": "HumanEval/123", "test_input": "get_odd_collatz(5)", "public_test_cases": "assert get_odd_collatz(5) == [1, 5]\n"}
{"task_id": "HumanEval/124", "test_input": "valid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')", "public_test_cases": "assert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False\n"}
{"task_id": "HumanEval/125", "test_input": "split_words(\"Hello world!\")\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")", "public_test_cases": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3\n"}
{"task_id": "HumanEval/126", "test_input": "is_sorted([5])\nis_sorted([1, 2, 3, 4, 5])\nis_sorted([1, 3, 2, 4, 5])\nis_sorted([1, 2, 3, 4, 5, 6])\nis_sorted([1, 2, 3, 4, 5, 6, 7])\nis_sorted([1, 3, 2, 4, 5, 6, 7])\nis_sorted([1, 2, 2, 3, 3, 4])\nis_sorted([1, 2, 2, 2, 3, 4])", "public_test_cases": "assert is_sorted([5]) == True\nassert is_sorted([1, 2, 3, 4, 5]) == True\nassert is_sorted([1, 3, 2, 4, 5]) == False\nassert is_sorted([1, 2, 3, 4, 5, 6]) == True\nassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\nassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\nassert is_sorted([1, 2, 2, 3, 3, 4]) == True\nassert is_sorted([1, 2, 2, 2, 3, 4]) == False\n"}
{"task_id": "HumanEval/127", "test_input": "intersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))", "public_test_cases": "assert intersection((1, 2), (2, 3)) == \"NO\"\nassert intersection((-1, 1), (0, 4)) == \"NO\"\nassert intersection((-3, -1), (-5, 5)) == \"YES\"\n"}
{"task_id": "HumanEval/128", "test_input": "prod_signs([1, 2, 2, -4])\nprod_signs([0, 1])\nprod_signs([])", "public_test_cases": "assert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None\n"}
{"task_id": "HumanEval/129", "test_input": "minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\nminPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)", "public_test_cases": "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\nassert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n"}
{"task_id": "HumanEval/130", "test_input": "tri(3)", "public_test_cases": "assert tri(3) == [1, 3, 2, 8]\n"}
{"task_id": "HumanEval/131", "test_input": "digits(1)\ndigits(4)\ndigits(235)", "public_test_cases": "assert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15\n"}
{"task_id": "HumanEval/132", "test_input": "is_nested('[[]]')\nis_nested('[]]]]]]][[[[[]')\nis_nested('[][]')\nis_nested('[]')\nis_nested('[[][]]')\nis_nested('[[]][[')", "public_test_cases": "assert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][[') == True\n"}
{"task_id": "HumanEval/133", "test_input": "sum_squares([1, 2, 3])\nsum_squares([1, 4, 9])\nsum_squares([1, 3, 5, 7])\nsum_squares([1.4, 4.2, 0])\nsum_squares([-2.4, 1, 1])", "public_test_cases": "assert sum_squares([1, 2, 3]) == 14\nassert sum_squares([1, 4, 9]) == 98\nassert sum_squares([1, 3, 5, 7]) == 84\nassert sum_squares([1.4, 4.2, 0]) == 29\nassert sum_squares([-2.4, 1, 1]) == 6\n"}
{"task_id": "HumanEval/134", "test_input": "check_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")", "public_test_cases": "assert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False\n"}
{"task_id": "HumanEval/135", "test_input": "can_arrange([1, 2, 4, 3, 5])\ncan_arrange([1, 2, 3])", "public_test_cases": "assert can_arrange([1, 2, 4, 3, 5]) == 3\nassert can_arrange([1, 2, 3]) == -1\n"}
{"task_id": "HumanEval/136", "test_input": "largest_smallest_integers([2, 4, 1, 3, 5, 7])\nlargest_smallest_integers([])\nlargest_smallest_integers([0])", "public_test_cases": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)\n"}
{"task_id": "HumanEval/137", "test_input": "compare_one(1, 2.5)\ncompare_one(1, \"2,3\")\ncompare_one(\"5,1\", \"6\")\ncompare_one(\"1\", 1)", "public_test_cases": "assert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None\n"}
{"task_id": "HumanEval/138", "test_input": "is_equal_to_sum_even(4)\nis_equal_to_sum_even(6)\nis_equal_to_sum_even(8)", "public_test_cases": "assert is_equal_to_sum_even(4) == False\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(8) == True\n"}
{"task_id": "HumanEval/139", "test_input": "special_factorial(4)", "public_test_cases": "assert special_factorial(4) == 288\n"}
{"task_id": "HumanEval/140", "test_input": "fix_spaces(\"Example\")\nfix_spaces(\"Example 1\")\nfix_spaces(\" Example 2\")\nfix_spaces(\" Example   3\")", "public_test_cases": "assert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\"\n"}
{"task_id": "HumanEval/141", "test_input": "file_name_check(\"example.txt\")\nfile_name_check(\"1example.dll\")", "public_test_cases": "assert file_name_check(\"example.txt\") == 'Yes'\nassert file_name_check(\"1example.dll\") == 'No'\n"}
{"task_id": "HumanEval/142", "test_input": "sum_squares([1, 2, 3])\nsum_squares([])\nsum_squares([-1, -5, 2, -1, -5])", "public_test_cases": "assert sum_squares([1, 2, 3]) == 6\nassert sum_squares([]) == 0\nassert sum_squares([-1, -5, 2, -1, -5]) == -126\n"}
{"task_id": "HumanEval/143", "test_input": "words_in_sentence(\"This is a test\")\nwords_in_sentence(\"lets go for swimming\")", "public_test_cases": "assert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\"\n"}
{"task_id": "HumanEval/144", "test_input": "simplify(\"1/5\", \"5/1\")\nsimplify(\"1/6\", \"2/1\")\nsimplify(\"7/10\", \"10/2\")", "public_test_cases": "assert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False\n"}
{"task_id": "HumanEval/145", "test_input": "order_by_points([1, 11, -1, -11, -12])\norder_by_points([])", "public_test_cases": "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert order_by_points([]) == []\n"}
{"task_id": "HumanEval/146", "test_input": "specialFilter([15, -73, 14, -15])\nspecialFilter([33, -2, -3, 45, 21, 109])", "public_test_cases": "assert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n"}
{"task_id": "HumanEval/147", "test_input": "get_max_triples(5)", "public_test_cases": "assert get_max_triples(5) == 1\n"}
{"task_id": "HumanEval/148", "test_input": "bf(\"Jupiter\", \"Neptune\")\nbf(\"Earth\", \"Mercury\")\nbf(\"Mercury\", \"Uranus\")", "public_test_cases": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\",)\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n"}
{"task_id": "HumanEval/149", "test_input": "sorted_list_sum([\"aa\", \"a\", \"aaa\"])\nsorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])", "public_test_cases": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n"}
{"task_id": "HumanEval/150", "test_input": "x_or_y(7, 34, 12)\nx_or_y(15, 8, 5)", "public_test_cases": "assert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5\n"}
{"task_id": "HumanEval/151", "test_input": "double_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])\ndouble_the_difference([])", "public_test_cases": "assert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0\nassert double_the_difference([]) == 0\n"}
{"task_id": "HumanEval/152", "test_input": "compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\ncompare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])", "public_test_cases": "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\nassert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]\n"}
{"task_id": "HumanEval/153", "test_input": "Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\nStrongest_Extension('my_class', ['AA', 'Be', 'CC'])", "public_test_cases": "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n"}
{"task_id": "HumanEval/154", "test_input": "cycpattern_check(\"abcd\", \"abd\")\ncycpattern_check(\"hello\", \"ell\")\ncycpattern_check(\"whassup\", \"psus\")\ncycpattern_check(\"abab\", \"baa\")\ncycpattern_check(\"efef\", \"eeff\")\ncycpattern_check(\"himenss\", \"simen\")", "public_test_cases": "assert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True\n"}
{"task_id": "HumanEval/155", "test_input": "even_odd_count(-12)\neven_odd_count(123)", "public_test_cases": "assert even_odd_count(-12) == (1, 1)\nassert even_odd_count(123) == (1, 2)\n"}
{"task_id": "HumanEval/156", "test_input": "int_to_mini_roman(19)\nint_to_mini_roman(152)\nint_to_mini_roman(426)", "public_test_cases": "assert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'\n"}
{"task_id": "HumanEval/157", "test_input": "right_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)", "public_test_cases": "assert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False\n"}
{"task_id": "HumanEval/158", "test_input": "find_max([\"name\", \"of\", \"string\"])\nfind_max([\"name\", \"enam\", \"game\"])\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])", "public_test_cases": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n"}
{"task_id": "HumanEval/159", "test_input": "eat(5, 6, 10)\neat(4, 8, 9)\neat(1, 10, 10)\neat(2, 11, 5)", "public_test_cases": "assert eat(5, 6, 10) == [11, 4]\nassert eat(4, 8, 9) == [12, 1]\nassert eat(1, 10, 10) == [11, 0]\nassert eat(2, 11, 5) == [7, 0]\n"}
{"task_id": "HumanEval/160", "test_input": "do_algebra(['+', '*', '-'], [2, 3, 4, 5])", "public_test_cases": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n"}
{"task_id": "HumanEval/161", "test_input": "solve(\"1234\")\nsolve(\"ab\")\nsolve(\"#a@C\")", "public_test_cases": "assert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\n"}
{"task_id": "HumanEval/162", "test_input": "string_to_md5('Hello world')", "public_test_cases": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n"}
{"task_id": "HumanEval/163", "test_input": "generate_integers(2, 8)\ngenerate_integers(8, 2)\ngenerate_integers(10, 14)", "public_test_cases": "assert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(8, 2) == [2, 4, 6, 8]\nassert generate_integers(10, 14) == []\n"}